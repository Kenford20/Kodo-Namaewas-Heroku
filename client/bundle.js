/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client.js":
/*!*******************!*\
  !*** ./client.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("window.onload = function() {\r\n\tconst host = window.location.origin; \r\n\tconst socket = io.connect(host);\r\n\r\n\t/* Global variables */\r\n\tconst joinBlue_btn    = document.querySelector(\"#blue-join-btn\");\r\n\tconst joinRed_btn     = document.querySelector(\"#red-join-btn\");\r\n\tconst redSpy_btn      = document.querySelector(\"#red-spy\");\r\n\tconst blueSpy_btn     = document.querySelector(\"#blue-spy\");\r\n\tconst startGame_btn   = document.querySelector(\"#start-game\");\r\n\tconst restartGame_btn = document.querySelector(\"#restart-game\");\r\n\tconst submitName_btn  = document.querySelector(\"#name-btn\");\r\n\r\n\tconst nameInput      = document.querySelector(\"#name-input\");\r\n\tconst chatInput      = document.querySelector(\"#chat-input\");\r\n\tconst teamChatInput  = document.querySelector(\"#team-chat-input\");\r\n\tconst allCards       = document.querySelectorAll(\".card\");\r\n\r\n\tconst spectatorList  = document.querySelector(\"#players\");\r\n\tconst bluePlayerList = document.querySelector(\"#blue-players\");\r\n\tconst redPlayerList  = document.querySelector(\"#red-players\");\r\n\t\r\n\tlet gameisNotStarted = true;\r\n\tlet bothSpiesExist = false;\r\n\r\n\tconst client = {\r\n\t\tname: '',\r\n\t\tteam: '',\r\n\t\tisSpymaster: false,\r\n\t\tyourTurn: false,\r\n\t\tteamJoinCounter: 0,\r\n\t\tisOnATeam: false,\r\n\t\tcanGuess: false\r\n\t};\r\n\t\r\n\t\r\n\t/***************************************************************\r\n\t******************* PLAYER SET UP BELOW ************************\r\n\t****************************************************************/\r\n\r\n\t/* \r\n\t\tPLAYER NAME SET UP\r\n\t*/\r\n\tconst nameHandlers = __webpack_require__(/*! ./functions/player-setup/name-handlers */ \"./functions/player-setup/name-handlers.js\");\r\n\tlet SEND_NAME_TO_SERVER = nameHandlers.sendNameToServer;\r\n\tlet APPEND_TO_DOM       = nameHandlers.appendToDOM;\r\n\tlet REMOVE_FROM_DOM     = nameHandlers.removeFromDOM;\r\n\tlet UPDATE_PLAYER_LISTS = nameHandlers.updatePlayerLists;\r\n\r\n\tconst teamHandlers = __webpack_require__(/*! ./functions/team-setup/team-handlers */ \"./functions/team-setup/team-handlers.js\");\r\n\tlet HANDLE_JOIN_TEAM = teamHandlers.handleJoinTeam;\r\n\r\n\tconst updateHandlers = __webpack_require__(/*! ./functions/update/update-handlers */ \"./functions/update/update-handlers.js\");\r\n\tlet UPDATE_CURRENT_PLAYERS = updateHandlers.updateCurrentPlayers;\r\n\r\n\t/* PLAYER SET UP HTML LISTENERS */\r\n\tsubmitName_btn.addEventListener(\"click\", () => {\r\n\t\tlet HIDE_ELEMENTS = __webpack_require__(/*! ./functions/update/hide-show-handlers */ \"./functions/update/hide-show-handlers.js\").hideElements;\r\n\t\t\r\n\t\tSEND_NAME_TO_SERVER(socket, 'newPlayerJoined', nameInput.value);\r\n\t\tclient.name = nameInput.value;\r\n\t\tHIDE_ELEMENTS(submitName_btn, nameInput);\r\n\t});\r\n\r\n\tjoinBlue_btn.addEventListener(\"click\", () => {\r\n\t\tif(client.team != 'blue' && client.name != '') {\r\n\t\t\tHANDLE_JOIN_TEAM(socket, gameisNotStarted, 'blue', client);\r\n\t\t}\r\n\t});\r\n\r\n\tjoinRed_btn.addEventListener(\"click\", () => {\r\n\t\tif(client.team != 'red' && client.name != '') {\r\n\t\t\tHANDLE_JOIN_TEAM(socket, gameisNotStarted, 'red', client);\r\n\t\t}\r\n\t});\r\n\r\n\t/* PLAYER SET UP SOCKET LISTENERS */\r\n\tsocket.on('add new player',   (spectatorName) => APPEND_TO_DOM(spectatorName, spectatorList));\r\n\tsocket.on('add blue player', (bluePlayerName) => APPEND_TO_DOM(bluePlayerName, bluePlayerList));\r\n\tsocket.on('add red player',   (redPlayerName) => APPEND_TO_DOM(redPlayerName, redPlayerList));\r\n\r\n\tsocket.on('removeSpectator', (spectator) => UPDATE_PLAYER_LISTS(socket, spectator, spectatorList, client));\r\n\tsocket.on('spectatorLeft', (spectator)   => UPDATE_PLAYER_LISTS(socket, spectator, spectatorList, client));\r\n\tsocket.on('bluePlayerLeft', (bluePlayer) => REMOVE_FROM_DOM(bluePlayer, bluePlayerList));\r\n\tsocket.on('redPlayerLeft', (redPlayer)   => REMOVE_FROM_DOM(redPlayer, redPlayerList));\r\n\tsocket.on('bothSpiesExist', (doBothSpiesExist) => bothSpiesExist = doBothSpiesExist);\r\n\r\n\tsocket.on('update players for new connection', ({ spectators, bluePlayers, redPlayers }) => {\r\n\t\tUPDATE_CURRENT_PLAYERS(spectators, spectatorList);\r\n\t\tUPDATE_CURRENT_PLAYERS(bluePlayers, bluePlayerList);\r\n\t\tUPDATE_CURRENT_PLAYERS(redPlayers,  redPlayerList);\r\n\t});\r\n\r\n\t/* \r\n\t\tSPYMASTER SET UP\r\n\t*/\r\n\tconst spyHandlers = __webpack_require__(/*! ./functions/spymaster-setup/spy-handlers */ \"./functions/spymaster-setup/spy-handlers.js\");\r\n\tlet SEND_SPY_TO_SERVER  = spyHandlers.sendSpyToServer;\r\n\tlet HIGHLIGHT_SPYMASTER = spyHandlers.highlightSpymaster;\r\n\tlet REMOVE_SPY_BUTTON   = spyHandlers.removeSpyButton;\r\n\tlet SHOW_SPY_BUTTON     = spyHandlers.showSpyButton;\r\n\r\n\t/* SPYMASTER HTML LISTENERS */\r\n\tblueSpy_btn.addEventListener(\"click\", () => SEND_SPY_TO_SERVER(socket, client));\r\n\tredSpy_btn.addEventListener(\"click\",  () => SEND_SPY_TO_SERVER(socket, client));\r\n\r\n\t/* SPYMASTER SOCKET LISTENERS */\r\n\tsocket.on('someoneBecameBlueSpy', ({ blueSpyMaster, blueSpyExists }) => {\r\n\t\tREMOVE_SPY_BUTTON(socket, blueSpyMaster, blueSpyExists, 'blue');\r\n\t});\r\n\r\n\tsocket.on('someoneBecameRedSpy', ({ redSpyMaster, redSpyExists }) => {\r\n\t\tREMOVE_SPY_BUTTON(socket, redSpyMaster, redSpyExists, 'red');\r\n\t});\r\n\r\n\tsocket.on('update blue spymaster for new connection', ({ blueSpyMaster, blueSpyExists }) => {\r\n\t\tREMOVE_SPY_BUTTON(socket, blueSpyMaster, blueSpyExists, 'blue');\r\n\t});\r\n\r\n\tsocket.on('update red spymaster for new connection', ({ redSpyMaster, redSpyExists }) => {\r\n\t\tREMOVE_SPY_BUTTON(socket, redSpyMaster, redSpyExists, 'red');\r\n\t});\r\n\r\n\tsocket.on('blueSpyLeft',        () => SHOW_SPY_BUTTON(client, 'blue'));\r\n\tsocket.on('blueSpyChangedTeam', () => SHOW_SPY_BUTTON(client, 'blue'));\r\n\tsocket.on('redSpyLeft',         () => SHOW_SPY_BUTTON(client, 'red'));\r\n\tsocket.on('redSpyChangedTeam',  () => SHOW_SPY_BUTTON(client, 'red'));\r\n\tsocket.on('highlightBlueSpy', (nameOfSpy) => HIGHLIGHT_SPYMASTER(nameOfSpy, bluePlayerList, 'blue'));\r\n\tsocket.on('highlightRedSpy',  (nameOfSpy) => HIGHLIGHT_SPYMASTER(nameOfSpy, redPlayerList, 'red'));\r\n\r\n\t/*\r\n\t\tCHAT\r\n\t*/\r\n\tconst chatHandlers = __webpack_require__(/*! ./functions/chat/chat-handlers */ \"./functions/chat/chat-handlers.js\");\r\n\tlet CHAT_ENTERED           = chatHandlers.chatEntered;\r\n\tlet TEAM_CHAT_ENTERED      = chatHandlers.teamChatEntered;\r\n\tlet DISPLAY_CHAT_MESSAGE   = chatHandlers.displayChatMessage;\r\n\tlet HIGHLIGHT_CHATTER      = chatHandlers.highlightChatter;\r\n\r\n\t/* CHAT HTML LISTENERS */\r\n\tchatInput.addEventListener(\"keyup\",     () => CHAT_ENTERED(socket, client));\r\n\tteamChatInput.addEventListener(\"keyup\", () => TEAM_CHAT_ENTERED(socket, client));\r\n\r\n\t/* CHAT SOCKET LISTENERS */\r\n\tsocket.on('displayChatMessage', ({ chatter, chatMessage, isTeamMessage }) => {\r\n\t\tDISPLAY_CHAT_MESSAGE(socket, chatter, chatMessage, isTeamMessage);\r\n\t});\r\n\r\n\tsocket.on('displayTeamChat', ({ chatter, chatMessage, isTeamMessage }) => {\r\n\t\tDISPLAY_CHAT_MESSAGE(socket, chatter, chatMessage, isTeamMessage);\r\n\t});\r\n\r\n\tsocket.on('showClientChatter', () => HIGHLIGHT_CHATTER(client));\r\n\r\n\t/***************************************************************\r\n\t************ GAME HAS NOW STARTED BELOW ************************\r\n\t****************************************************************/\r\n\r\n\t/*\r\n\t\tINITIAL GAME SET UP\r\n\t*/\r\n\tconst gameSetupHandlers = __webpack_require__(/*! ./functions/game-setup/game-setup-handlers */ \"./functions/game-setup/game-setup-handlers.js\");\r\n\tlet SET_STARTING_BOARD   = gameSetupHandlers.setStartingBoard;\r\n\tlet SHOW_SCORES          = gameSetupHandlers.showScores;\r\n\tlet SET_GAME_WORDS       = gameSetupHandlers.setGameWords;\r\n\tlet SET_SPY_BOARD_COLORS = gameSetupHandlers.setSpyBoardColors;\r\n\tlet CREATE_HINT_BOX      = gameSetupHandlers.createHintBox;\r\n\r\n\tlet UPDATE_BOARD      = updateHandlers.updateBoard;\r\n\tlet UPDATE_GAME_WORDS = updateHandlers.updateGameWords;\r\n\r\n\t/* GAME SETUP HTML LISTENERS */\r\n\tstartGame_btn.addEventListener(\"click\", () => {\r\n\t\tSET_STARTING_BOARD(socket, bothSpiesExist, gameisNotStarted);\r\n\t});\r\n\r\n\t/* GAME SETUP SOCKET LISTENERS */\r\n\tsocket.on('gameHasStarted', () => gameisNotStarted = false);\r\n\tsocket.on('showScores',         (gameData) => SHOW_SCORES(gameData));\r\n\tsocket.on('setUpGameWords',   (boardWords) => SET_GAME_WORDS(boardWords));\r\n\tsocket.on('youCanSeeTheBoard', (boardData) => SET_SPY_BOARD_COLORS(boardData));\r\n\tsocket.on('createHintBox',      (gameData) => CREATE_HINT_BOX(gameData));\r\n\r\n\tsocket.on('updateBoard', (gameData) => UPDATE_BOARD(gameData));\r\n\tsocket.on('updateGameWords', (gameData) => UPDATE_GAME_WORDS(gameData));\r\n\r\n\t/* \r\n\t\tGAME PLAY \r\n\t*/\r\n\tconst gameplayHandlers = __webpack_require__(/*! ./functions/game-setup/game-play-handlers */ \"./functions/game-setup/game-play-handlers.js\");\r\n\tlet UPDATE_SCORES = gameplayHandlers.updateScores;\r\n\tlet SHOW_WAITING_MESSAGE = gameplayHandlers.showWaitingMessage;\r\n\tlet START_GUESS = gameplayHandlers.startGuess;\r\n\tlet SHOW_GUESS_MESSAGE = gameplayHandlers.showGuessMessage;\r\n\tlet REVEAL_HINT = gameplayHandlers.revealHint;\r\n\tlet SHOW_GUESSER = gameplayHandlers.showGuesser;\r\n\tlet END_GAME = gameplayHandlers.endGame;\r\n\r\n\tlet cardHandlers = __webpack_require__(/*! ./functions/game-setup/card-handlers */ \"./functions/game-setup/card-handlers.js\");\r\n\tlet SEND_PICKED_CARD_TO_SERVER = cardHandlers.sendPickedCardToServer;\r\n\tlet REVEAL_CARD_COLOR_EVERYONE = cardHandlers.revealCardColor;\r\n\tlet REVEAL_CARD_COLOR_SPIES = cardHandlers.revealCardForSpies;\r\n\tlet ENABLE_GUESSING = cardHandlers.enableGuessing;\r\n\tlet DISABLE_GUESSING = cardHandlers.disableGuessing;\r\n\r\n\t/* GAME PLAY HTML LISTENERS */\r\n\tdocument.querySelector(\"#hint-btn\").addEventListener(\"click\", () => START_GUESS(socket));\r\n\r\n\tfor(let i = 0; i < allCards.length; i++) {\r\n\t\tallCards[i].addEventListener(\"click\", (e) => {\r\n\t\t\tconsole.log(e.target.localName);\r\n\t\t\t// handles bug that occurs when user clicks on the word of the card(paragraph tag) instead of the card itself\r\n\t\t\tlet cardPicked = e.target.localName === 'p' ? e.target.parentNode : e.target;\r\n\t\t\tSEND_PICKED_CARD_TO_SERVER(socket, client, cardPicked)\r\n\t\t});\r\n\t}\r\n\r\n\t/* GAME PLAY SOCKET LISTENERS */\r\n\tsocket.on('updateScore',       (gameData) => UPDATE_SCORES(gameData));\r\n\tsocket.on('waitingForBlueSpy', (gameData) => SHOW_WAITING_MESSAGE(gameData, 'blue'));\r\n\tsocket.on('waitingForRedSpy',  (gameData) => SHOW_WAITING_MESSAGE(gameData, 'red'));\r\n\tsocket.on('guessMessage',      (gameData) => SHOW_GUESS_MESSAGE(gameData));\r\n\r\n\tsocket.on('revealHint',  (hintData) => REVEAL_HINT(hintData));\r\n\tsocket.on('showGuesser', (gameData) => SHOW_GUESSER(gameData));\r\n\tsocket.on('guessHasBeenMade', (gameData) => REVEAL_CARD_COLOR_SPIES(gameData));\r\n\tsocket.on('revealCardColor',  (gameData) => REVEAL_CARD_COLOR_EVERYONE(socket, gameData));\r\n\r\n\tsocket.on('start guessing phase', () => ENABLE_GUESSING(client));\r\n\tsocket.on('end guessing phase',   () => DISABLE_GUESSING(client));\r\n\r\n\tsocket.on('blueWins', () => END_GAME('blue', client));\r\n\tsocket.on('redWins', () => END_GAME('red', client));\r\n\r\n\t/*\r\n\t\tRESTART\r\n\t*/\r\n\tconst restartHandlers = __webpack_require__(/*! ./functions/game-setup/restart-handlers */ \"./functions/game-setup/restart-handlers.js\");\r\n\tlet RESET_DOM_ELEMENTS = restartHandlers.resetDOMelements;\r\n\tlet RESET_CHAT = restartHandlers.resetChat;\r\n\tlet REMOVE_SPY_INPUTS = restartHandlers.removeSpyInputs;\r\n\tlet GENERATE_NEW_BOARD = restartHandlers.generateNewBoard;\r\n\r\n\tlet RESTART_GAME = __webpack_require__(/*! ./functions/game-setup/restart-handlers */ \"./functions/game-setup/restart-handlers.js\").restartGame;\r\n\r\n\t/* RESTART GAME HTML LISTENERS */\r\n\trestartGame_btn.addEventListener(\"click\", () => RESTART_GAME(socket, client));\r\n\r\n\t/* RESTART GAME SOCKET LISTENERS */\r\n\tsocket.on('restartingGame', ({ allPlayers }) => {\r\n\t\tgameisNotStarted = true;\r\n\t\tbothSpiesExist = false;\r\n\t\tRESET_DOM_ELEMENTS(client);\r\n\r\n\t\t// remove all the player names from the client's browser\r\n\t\tfor(let i = 0; i < allPlayers.length; i++) {\r\n\t\t\tUPDATE_PLAYER_LISTS(socket, allPlayers[i], spectatorList, client);\r\n\t\t\tREMOVE_FROM_DOM(allPlayers[i], bluePlayerList);\r\n\t\t\tREMOVE_FROM_DOM(allPlayers[i], redPlayerList);\r\n\t\t}\r\n\t});\r\n\r\n\tsocket.on('removeSpyInputs', () => REMOVE_SPY_INPUTS());\r\n\tsocket.on('resetTheChat',     () => RESET_CHAT());\r\n\tsocket.on('newBoard', (gameData) => GENERATE_NEW_BOARD(gameData));\r\n}\n\n//# sourceURL=webpack:///./client.js?");

/***/ }),

/***/ "./functions/chat/chat-handlers.js":
/*!*****************************************!*\
  !*** ./functions/chat/chat-handlers.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const chat           = document.querySelector(\"#chat\");\r\nconst chatInput      = document.querySelector(\"#chat-input\");\r\nconst teamChatInput  = document.querySelector(\"#team-chat-input\");\r\nconst chatBox        = document.querySelector(\"#global-message-box\");\r\nconst teamChatBox    = document.querySelector(\"#team-message-box\");\r\n\r\nfunction chatEntered(socket, client) {\r\n    \r\n\tif(event.keyCode == 13) {\r\n\t\tconst { name } = client;\r\n\t\tif(name != '') {\r\n\t\t\tconst chatData = {\r\n\t\t\t\tchatter: '',\r\n\t\t\t\tchatMessage: ''\r\n            };\r\n            \r\n\t\t\tchatData.chatter = name;\r\n\t\t\tchatData.chatMessage = chatInput.value;\r\n\t\t\tsocket.emit('someoneChatted', chatData);\r\n\t\t\tchatInput.value = '';\r\n\t\t} else {\r\n\t\t\tchatInput.value = '';\r\n\t\t\talert(\"Please enter a name before you chat!\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction teamChatEntered(socket, client) {\r\n\tif(event.keyCode == 13) {\r\n\t\tconst { team, name } = client;\r\n\t\tif(team != '') {\r\n\t\t\tconst teamChatData = {\r\n\t\t\t\tteamChatter: '',\r\n\t\t\t\tchatterTeamColor: '',\r\n\t\t\t\tteamChatMessage: ''\r\n            };\r\n            \r\n\t\t\tteamChatData.teamChatter = name;\r\n\t\t\tteamChatData.chatterTeamColor = team;\r\n\t\t\tteamChatData.teamChatMessage = teamChatInput.value;\r\n\t\t\tsocket.emit('teamChat', teamChatData);\r\n\t\t\tteamChatInput.value = '';\r\n\t\t}\r\n\t\telse{\r\n\t\t\tteamChatInput.value = '';\r\n\t\t\talert(\"Please join a team before using team chat!\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction displayChatMessage(socket, chatter, chatMessage, isTeamMessage) {\r\n\tsocket.emit('chatterSpan');\r\n\r\n\tlet message = document.createElement(\"h5\");\r\n\tlet chatterName = document.createElement(\"span\");\r\n\tlet chatterNode = document.createTextNode(chatter);\r\n\tchatterName.appendChild(chatterNode);\r\n\tmessage.appendChild(chatterName);\r\n\r\n\tlet chatText = \": \" + chatMessage;\r\n\tlet messageNode = document.createTextNode(chatText);\r\n\tmessage.appendChild(messageNode);\r\n\tmessage.classList.add(\"chat-message\");\r\n\r\n\tif(isTeamMessage) {\r\n\t\tteamChatBox.appendChild(message);\r\n    } else {\r\n        chatBox.appendChild(message);\r\n    }\r\n\r\n\t// keeps the chatbox at the bottom of the scrollbar after overflow occurs within the chatbox div\r\n\tchatBox.scrollTop = chatBox.scrollHeight;\r\n\tteamChatBox.scrollTop = teamChatBox.scrollHeight;\r\n}\r\n\r\n// styles the client's name in the chatbox to differentiate from the other players chat message\r\nfunction highlightChatter(client) {\r\n\tlet chatterNames = [].slice.call(chat.querySelectorAll(\"span\"));\r\n\t\r\n\tchatterNames.filter(names => names.innerHTML == client.name)\r\n\t.map(name => name.classList.add('highlight-chatter'));\r\n}\r\n\r\nmodule.exports = {\r\n    chatEntered: chatEntered,\r\n    teamChatEntered: teamChatEntered,\r\n    displayChatMessage: displayChatMessage,\r\n    highlightChatter: highlightChatter\r\n}\n\n//# sourceURL=webpack:///./functions/chat/chat-handlers.js?");

/***/ }),

/***/ "./functions/game-setup/card-handlers.js":
/*!***********************************************!*\
  !*** ./functions/game-setup/card-handlers.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const allCards = document.querySelectorAll(\".card\");\r\n\r\n// takes an array of the board's card positions and shuffles the indices around\r\nfunction shuffleNumbers(cardPositions) {\r\n    let i = cardPositions.length;\r\n    let j = 0;\r\n    let temp;\r\n\r\n    while (i--) {\r\n    \t// generates a random index to swap with\r\n        j = Math.floor(Math.random() * (i+1));\r\n\r\n        // swap randomly chosen element with current element\r\n        temp = cardPositions[i];\r\n        cardPositions[i] = cardPositions[j];\r\n        cardPositions[j] = temp;\r\n    }\r\n    return cardPositions;\r\n}\r\n\r\nfunction fetchGameWords(file){\r\n\tlet fileWords;\r\n    let rawFile = new XMLHttpRequest();\r\n    rawFile.open(\"GET\", file, false);\r\n    rawFile.onreadystatechange = function (){\r\n        if(rawFile.readyState === 4){\r\n            if(rawFile.status === 200 || rawFile.status == 0){\r\n                let allWords = rawFile.responseText;\r\n                fileWords = allWords.split('\\n');\r\n            }\r\n        }\r\n    }\r\n    rawFile.send(null);\r\n    return fileWords;\r\n}\r\n\r\n// determines which card was selected based on the index in the array of cards\r\nfunction sendPickedCardToServer(socket, client, pickedCard) {\r\n\tconst { canGuess, name } = client;\r\n\tif(canGuess) { \r\n\t\tlet allCardsArray = [].slice.call(allCards);\r\n\t\tsocket.emit('cardWasPicked', allCardsArray.indexOf(pickedCard));\r\n\t\tsocket.emit('showGuesser', name);\r\n\t} else {\r\n\t\talert('It is not your turn! Please wait until next round to guess!');\r\n\t}\r\n}\r\n\r\n// just changes styles for spies when a card is selected so they know what the guesses are\r\nfunction revealCardForSpies({ cardSelected, gameBoardColors }){\r\n    allCards[cardSelected].classList.remove('rotate');\r\n    \r\n    let colorToRemove = \r\n          gameBoardColors[cardSelected] === 'blue' ? 'blue' \r\n        : gameBoardColors[cardSelected] === 'red' ? 'red'\r\n        : gameBoardColors[cardSelected] === 'yellow' ? 'yellow' : 'black';\r\n\r\n    let colorToAdd = \r\n          gameBoardColors[cardSelected] === 'blue' ? 'blue2' \r\n        : gameBoardColors[cardSelected] === 'red' ? 'red2'\r\n        : gameBoardColors[cardSelected] === 'yellow' ? 'yellow2' : 'black2';\r\n\r\n    allCards[cardSelected].classList.remove(colorToRemove);\r\n    allCards[cardSelected].classList.add(colorToAdd);\r\n    allCards[cardSelected].classList.add('rotate');\r\n}\r\n\r\n// receives the selected card from above and reveals its true color from the game board\r\n// turn ends when the number of selected cards match the number given in the hint\r\n// turn also ends when a yellow or a card from the opposite team is selected\r\nfunction revealCardColor(socket, gameData){\r\n    const { \r\n        cardSelected, \r\n        gameBoardColors, \r\n        numCardsPicked, \r\n        numCardsToGuess, \r\n        isBlueTurn, \r\n        isRedTurn \r\n    } = gameData;\r\n\r\n    console.log(`card: ${cardSelected}`)\r\n\r\n\tallCards[cardSelected].classList.remove(\"default\");\r\n\tallCards[cardSelected].classList.add(gameBoardColors[cardSelected]);\r\n\tallCards[cardSelected].classList.remove('rotate');\r\n\tsocket.emit('updateCardCount', gameBoardColors[cardSelected]);\r\n\r\n\tif(numCardsPicked < numCardsToGuess) {\r\n\t\tif((isBlueTurn && gameBoardColors[cardSelected] == 'red') ||\r\n\t\t   (isRedTurn && gameBoardColors[cardSelected] == 'blue') ||\r\n           gameBoardColors[cardSelected] == 'yellow') \r\n           {\r\n\t\t\tsocket.emit('endTurn');\r\n        }\r\n        \r\n\t\tif(gameBoardColors[cardSelected] == 'black')\r\n\t\t\tsocket.emit('blackCard');\r\n\t}\r\n\telse {\r\n\t\tif(gameBoardColors[cardSelected] == 'black') {\r\n\t\t\tsocket.emit('blackCard');\r\n        } else {\r\n\t\t\tsocket.emit('updateCardCount', gameBoardColors[cardSelected]);\r\n\t\t\tsocket.emit('endTurn');\r\n\t\t}\r\n\t}\r\n\tallCards[cardSelected].classList.add('rotate');\r\n}\r\n\r\n// boolean controlled by the server (will only run for clients when it is their turn to guess)\r\nfunction enableGuessing(client){\r\n\tclient.canGuess = true;\r\n}\r\n\r\n// players aren't allowed to guess/select cards during the hinting phase \r\nfunction disableGuessing(client){\r\n\tclient.canGuess = false;\r\n}\r\n\r\nmodule.exports = {\r\n    shuffleNumbers: shuffleNumbers,\r\n    fetchGameWords: fetchGameWords,\r\n    sendPickedCardToServer: sendPickedCardToServer,\r\n    revealCardForSpies: revealCardForSpies,\r\n    revealCardColor: revealCardColor,\r\n    enableGuessing: enableGuessing,\r\n    disableGuessing: disableGuessing\r\n}\n\n//# sourceURL=webpack:///./functions/game-setup/card-handlers.js?");

/***/ }),

/***/ "./functions/game-setup/game-play-handlers.js":
/*!****************************************************!*\
  !*** ./functions/game-setup/game-play-handlers.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const blueScoreValue = document.querySelector(\"#blue-score-number\");\r\nconst redScoreValue  = document.querySelector(\"#red-score-number\");\r\n\r\nconst blueWaitingMessage = document.querySelector(\"#blue-waiting\");\r\nconst redWaitingMessage  = document.querySelector(\"#red-waiting\");\r\nconst blueGuessMessage   = document.querySelector(\"#blue-guess\");\r\nconst redGuessMessage    = document.querySelector(\"#red-guess\");\r\nconst resetMessage       = document.querySelector(\"#reset-message\");\r\nconst hintInput          = document.querySelector(\"#hint-input-container\");\r\n\r\nconst allCards = document.querySelectorAll(\".card\");\r\n\r\nconst hideShowHandlers = __webpack_require__(/*! ../update/hide-show-handlers */ \"./functions/update/hide-show-handlers.js\");\r\nlet HIDE_ELEMENTS = hideShowHandlers.hideElements;\r\nlet SHOW_ELEMENTS = hideShowHandlers.showElements;\r\n\r\nlet DISABLE_GUESSING = __webpack_require__(/*! ../game-setup/card-handlers */ \"./functions/game-setup/card-handlers.js\").disableGuessing;\r\n\r\nfunction updateScores({ numBlueCards, numRedCards }){\r\n\tblueScoreValue.innerHTML = numBlueCards;\r\n\tredScoreValue.innerHTML = numRedCards;\r\n}\r\n\r\nfunction showWaitingMessage({ gameOver }, waitingTeam) {\r\n    if(!gameOver){\r\n        let waitingMessage = waitingTeam === 'red' ? blueWaitingMessage : redWaitingMessage;\r\n        let guessMessage = waitingTeam === 'red' ? blueGuessMessage : redGuessMessage;\r\n\r\n\t\tHIDE_ELEMENTS(\r\n\t\t\twaitingMessage,\r\n\t\t\tguessMessage, \r\n\t\t\tresetMessage, \r\n\t\t\tdocument.querySelector(\"#hint-message\"), \r\n\t\t\tdocument.querySelector(\"#message\")\r\n\t\t);\r\n\t\tSHOW_ELEMENTS(waitingTeam === 'blue' ? blueWaitingMessage : redWaitingMessage);\r\n\t}\r\n}\r\n\r\n// runs when hint submission button is clicked\r\nfunction startGuess(socket){\r\n\tsocket.emit('guessMessage');\r\n\r\n\tconst hintData = {\r\n\t\tword: '',\r\n\t\tnumber: 0,\r\n\t\tisBlueTurn: false,\r\n\t\tisRedTurn: false\r\n\t};\r\n\r\n\thintData.word = document.querySelector(\"#input-hint\").value;\r\n\thintData.number = document.querySelector(\"select\").value;\r\n\tsocket.emit('hintSubmitted', hintData);\r\n\r\n\tHIDE_ELEMENTS(hintInput);\r\n\r\n\tlet select = document.querySelector(\"select\");\r\n\tselect.parentNode.removeChild(select);\r\n\r\n\tsocket.emit('readyToGuess');\r\n}\r\n\r\nfunction showGuessMessage({ isBlueTurn }){\r\n\tHIDE_ELEMENTS(resetMessage);\r\n\tif(isBlueTurn) {\r\n\t\tHIDE_ELEMENTS(blueWaitingMessage);\r\n\t\tSHOW_ELEMENTS(blueGuessMessage);\r\n\t} else {\r\n\t\tHIDE_ELEMENTS(redWaitingMessage);\r\n\t\tSHOW_ELEMENTS(redGuessMessage);\r\n\t}\r\n}\r\n\r\nfunction revealHint(hintData) {\r\n\tSHOW_ELEMENTS(document.querySelector(\"#hint-message\"));\r\n\tdocument.querySelector(\"#hint-word\").innerHTML = hintData.word;\r\n\tdocument.querySelector(\"#hint-number\").innerHTML = hintData.number;\r\n\r\n\tif(hintData.isBlueTurn){\r\n\t\tdocument.querySelector(\"#hint-word\").style.color = \"#1c64ff\";\r\n\t\tdocument.querySelector(\"#hint-number\").style.color = \"#1c64ff\";\r\n\t} else {\r\n\t\tdocument.querySelector(\"#hint-word\").style.color = \"#db3328\";\r\n\t\tdocument.querySelector(\"#hint-number\").style.color = \"#db3328\";\r\n\t}\r\n}\r\n\r\n// reveals the div that shows who guessed the lastly guessed word\r\nfunction showGuesser({ isBlueTurn, cardSelected, playerWhoGuessed }){\r\n\tlet guesserID = isBlueTurn ? \"#blue-guess-name\" : \"#red-guess-name\";\r\n\tlet guessedWordID = isBlueTurn ? \"#blue-guess-word\" : \"#red-guess-word\";\r\n\tlet guesserDiv = isBlueTurn ? \"#blue-guesser\" : \"#red-guesser\";\r\n\r\n\tdocument.querySelector(guesserID).innerHTML = playerWhoGuessed;\r\n\tlet wordPicked = allCards[cardSelected].querySelector(\"p\").innerHTML\r\n\tdocument.querySelector(guessedWordID).innerHTML = wordPicked;\r\n\tSHOW_ELEMENTS(document.querySelector(guesserDiv));\r\n}\r\n\r\nfunction endGame(winningTeam, client) {\r\n\tlet styleWinner = winningTeam === 'blue' ? \"blue-word\" : \"red-word\";\r\n\tlet winningMessageID = winningTeam === 'blue' ? \"#blue-wins\" : \"#red-wins\";\r\n\r\n\tlet congratsMessage = document.querySelector(\"#congrats\");\r\n\tcongratsMessage.classList.add(styleWinner);\r\n\r\n\tDISABLE_GUESSING(client)\r\n\r\n\tSHOW_ELEMENTS(\r\n\t\tdocument.querySelector(winningMessageID),\r\n\t\tcongratsMessage\r\n\t);\r\n\tHIDE_ELEMENTS(\r\n\t\tdocument.querySelector(\"#hint-message\"),\r\n\t\tblueWaitingMessage,\r\n\t\tredWaitingMessage,\r\n\t\tblueGuessMessage,\r\n\t\tredGuessMessage\r\n\t);\r\n}\r\n\r\nmodule.exports = {\r\n    updateScores: updateScores,\r\n    showWaitingMessage: showWaitingMessage,\r\n    startGuess: startGuess,\r\n    showGuessMessage: showGuessMessage,\r\n    revealHint: revealHint,\r\n\tshowGuesser: showGuesser,\r\n\tendGame: endGame\r\n}\r\n\n\n//# sourceURL=webpack:///./functions/game-setup/game-play-handlers.js?");

/***/ }),

/***/ "./functions/game-setup/game-setup-handlers.js":
/*!*****************************************************!*\
  !*** ./functions/game-setup/game-setup-handlers.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const blueScoreValue = document.querySelector(\"#blue-score-number\");\r\nconst redScoreValue  = document.querySelector(\"#red-score-number\");\r\nconst hintInput      = document.querySelector(\"#hint-input-container\");\r\nconst gameBoard      = document.querySelector(\"#game-board\");\r\nconst allCards       = document.querySelectorAll(\".card\");\r\n\r\nconst cardHandlers = __webpack_require__(/*! ./card-handlers */ \"./functions/game-setup/card-handlers.js\");\r\nlet SHUFFLE_NUMBERS = cardHandlers.shuffleNumbers;\r\nlet FETCH_GAME_WORDS = cardHandlers.fetchGameWords;\r\n\r\nlet SHOW_ELEMENTS = __webpack_require__(/*! ../update/hide-show-handlers */ \"./functions/update/hide-show-handlers.js\").showElements;\r\n\r\nfunction showScores({ numBlueCards, numRedCards }){\r\n\tblueScoreValue.innerHTML = numBlueCards;\r\n\tredScoreValue.innerHTML = numRedCards;\r\n\tdocument.querySelector(\"#blue-score\").style.display = \"inline-block\";\r\n\tdocument.querySelector(\"#red-score\").style.display = \"inline-block\";\r\n}\r\n\r\nfunction sendWordsToServer(socket) {\r\n    // about 1000 words in this file, can add/remove any words you want to play with in this file\r\n    let possibleWords = FETCH_GAME_WORDS(\"words.txt\");\r\n    let boardWords = [];\r\n\r\n    // take random words from the file of words and push them to the array of 25 words for the game board\r\n    for(let i = 0; i < 25; i++) {\r\n        let randomWord = Math.floor(Math.random() * possibleWords.length);\r\n        boardWords.push(possibleWords[randomWord]);\r\n    }\r\n    socket.emit('setUpGameWords', boardWords);\r\n}\r\n\r\nfunction setStartingBoard(socket, bothSpiesExist, gameisNotStarted){\r\n\tif(bothSpiesExist && gameisNotStarted){\r\n\t\tsocket.emit('gameHasStarted');\r\n\t\tlet boardData = {\r\n\t\t\trandomIndices: [],\r\n\t\t\tdivColors: []\r\n\t\t}\r\n\t\tlet randomNumbers = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24];\r\n\r\n\t\tboardData.randomIndices = SHUFFLE_NUMBERS(randomNumbers);\r\n        let randomTeamStarts = Math.floor(Math.random() * 2); // returns 0 or 1\r\n        \r\n        const initialCards = {\r\n            redTeamStarts: ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'black'],\r\n            blueTeamStarts: ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'black'],\r\n        };\r\n\r\n\t\tif(randomTeamStarts == 0) {\r\n\t\t\tboardData.divColors = initialCards.blueTeamStarts;\r\n\t\t\tsocket.emit('blueTeamStarts');\r\n        } else if(randomTeamStarts == 1) {\r\n\t\t\tboardData.divColors = initialCards.redTeamStarts;\r\n\t\t\tsocket.emit('redTeamStarts');\r\n\t\t}\r\n        socket.emit('setUpBoardforSpies', boardData);\r\n        sendWordsToServer(socket);\r\n\t} else {\r\n\t\talert('You need atleast 4 players to play, 2 Supaimasutas and 2 guessers!');\r\n\t}\r\n}\r\n\r\nfunction setGameWords(boardWords){\r\n\tlet gameWords = gameBoard.querySelectorAll(\"p\");\r\n\tfor(let i = 0; i < gameWords.length; i++)\r\n\t\tgameWords[i].innerHTML = boardWords[i];\r\n}\r\n\r\nfunction setSpyBoardColors(boardData){\r\n\t// assign random color to each div or card on the game board\r\n\tfor(let i = 0; i < allCards.length; i++){\r\n\t\tlet randomIndex = boardData.randomIndices[i];\r\n\t\tlet randomCardColor = boardData.divColors[randomIndex];\r\n\t\tallCards[i].classList.add(randomCardColor);\r\n\t}\r\n}\r\n\r\nfunction createHintBox({ isBlueTurn, numBlueCards, numRedCards }){\r\n    SHOW_ELEMENTS(hintInput);\r\n    \r\n\tlet selectNode = document.createElement(\"select\");\r\n\thintInput.insertBefore(selectNode, hintInput.firstChild);\r\n\tlet numCards = isBlueTurn ? numBlueCards : numRedCards;\r\n\r\n\t// create dropdown menu for number of guesses to the hint\r\n    for(let i = 1; i < (numCards+1); i++){\r\n    \tlet selectOption = document.createElement(\"option\");\r\n    \tselectOption.setAttribute(\"value\", i);\r\n    \tselectOption.innerHTML = i;\r\n    \tselectNode.appendChild(selectOption);\r\n\t}\r\n}\r\n\r\nmodule.exports = {\r\n    setStartingBoard: setStartingBoard,\r\n    showScores: showScores,\r\n    setGameWords: setGameWords,\r\n    setSpyBoardColors: setSpyBoardColors,\r\n    createHintBox: createHintBox\r\n}\n\n//# sourceURL=webpack:///./functions/game-setup/game-setup-handlers.js?");

/***/ }),

/***/ "./functions/game-setup/restart-handlers.js":
/*!**************************************************!*\
  !*** ./functions/game-setup/restart-handlers.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const redSpy_btn      = document.querySelector(\"#red-spy\");\r\nconst blueSpy_btn     = document.querySelector(\"#blue-spy\");\r\nconst submitName_btn  = document.querySelector(\"#name-btn\");\r\n\r\nconst hintInput      = document.querySelector(\"#hint-input-container\");\r\nconst nameInput      = document.querySelector(\"#name-input\");\r\nconst chatBox        = document.querySelector(\"#global-message-box\");\r\nconst teamChatBox    = document.querySelector(\"#team-message-box\");\r\nconst gameBoard      = document.querySelector(\"#game-board\");\r\nconst allCards       = document.querySelectorAll(\".card\");\r\n\r\nconst blueWaitingMessage = document.querySelector(\"#blue-waiting\");\r\nconst redWaitingMessage  = document.querySelector(\"#red-waiting\");\r\nconst blueGuessMessage   = document.querySelector(\"#blue-guess\");\r\nconst redGuessMessage    = document.querySelector(\"#red-guess\");\r\nconst resetMessage       = document.querySelector(\"#reset-message\");\r\n\r\nconst hideShowHandlers = __webpack_require__(/*! ../update/hide-show-handlers */ \"./functions/update/hide-show-handlers.js\");\r\nlet HIDE_ELEMENTS = hideShowHandlers.hideElements;\r\nlet SHOW_ELEMENTS = hideShowHandlers.showElements;\r\n\r\nfunction restartGame(socket) {\r\n\tsocket.emit('restartGame');\r\n}\r\n\r\nfunction resetDOMelements(client) {\r\n\t// reset all client data\r\n\tclient.team = '';\r\n\tclient.isSpymaster = false;\r\n\tclient.yourTurn = false;\r\n\tclient.teamJoinCounter = 0;\r\n\tclient.isOnATeam = false;\r\n\tclient.canGuess = false;\r\n\r\n\t// reset all buttons and messages\r\n\tSHOW_ELEMENTS(\r\n\t\tblueSpy_btn,\r\n\t\tredSpy_btn,\r\n\t\tsubmitName_btn,\r\n\t\tnameInput,\r\n\t\tresetMessage,\r\n\t\tdocument.querySelector(\"#message\"),\r\n\t\tdocument.querySelector(\"#blue-spy-message\"),\r\n\t\tdocument.querySelector(\"#red-spy-message\"),\r\n\t\tdocument.querySelector(\"#blue-spy-waiting\"),\r\n\t\tdocument.querySelector(\"#red-spy-waiting\")\r\n\t);\r\n\tHIDE_ELEMENTS(\r\n\t\tdocument.querySelector(\"#reveal-blue-spy\"),\r\n\t\tdocument.querySelector(\"#reveal-red-spy\"),\r\n\t\tdocument.querySelector(\"#blue-wins\"),\r\n\t\tdocument.querySelector(\"#red-wins\"),\r\n\t\tdocument.querySelector(\"#congrats\"),\r\n\t\tdocument.querySelector(\"#hint-message\"),\r\n\t\tdocument.querySelector(\"#chat\"),\r\n\t\tdocument.querySelector(\"#message\"),\r\n\t\tblueWaitingMessage,\r\n\t\tredWaitingMessage,\r\n\t\tblueGuessMessage,\r\n\t\tredGuessMessage\r\n\t);\r\n\tdocument.querySelector(\"#blue-score\").style.display = 'none';\r\n\tdocument.querySelector(\"#red-score\").style.display = 'none';\r\n\r\n\t// reset team chat border color\r\n\tdocument.querySelector(\"#team-chat-div\").classList.add(\"chat-black\");\r\n\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"team-chat-blue\");\r\n\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"team-chat-red\");\r\n}\r\n\r\nfunction generateNewBoard({ currentBoardColors }) { \r\n\tfor(let i = 0; i < currentBoardColors.length; i++){\r\n\t\tallCards[i].classList.remove(\"red\", \"red2\");\r\n\t\tallCards[i].classList.remove(\"blue\", \"blue2\");\r\n\t\tallCards[i].classList.remove(\"yellow\", \"yellow2\");\r\n\t\tallCards[i].classList.remove(\"black\", \"black2\");\r\n    }\r\n    \r\n    let gameWords = [].slice.call(gameBoard.querySelectorAll(\"p\"));\r\n\tgameWords.map((word, index) => word.innerHTML = 'Word' + (index + 1));\t\r\n}\r\n\r\nfunction removeSpyInputs() {\r\n\tHIDE_ELEMENTS(hintInput);\r\n\r\n\tlet select = document.querySelector(\"select\");\r\n\tselect.parentNode.removeChild(select);\r\n}\r\n\r\nfunction resetChat() {\r\n\tlet allGlobalMessages = [].slice.call(chatBox.querySelectorAll(\"h5\"));\r\n\tlet allTeamMessages = [].slice.call(teamChatBox.querySelectorAll(\"h5\"));\r\n\r\n\tallGlobalMessages.map(message => chatBox.removeChild(message));\r\n\tallTeamMessages.map(message => teamChatBox.removeChild(message));\r\n}\r\n\r\nmodule.exports = {\r\n\trestartGame: restartGame,\r\n\tresetDOMelements: resetDOMelements,\r\n\tgenerateNewBoard: generateNewBoard,\r\n\tremoveSpyInputs: removeSpyInputs,\r\n    resetChat: resetChat,\r\n}\n\n//# sourceURL=webpack:///./functions/game-setup/restart-handlers.js?");

/***/ }),

/***/ "./functions/player-setup/name-handlers.js":
/*!*************************************************!*\
  !*** ./functions/player-setup/name-handlers.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function sendNameToServer(socket, socketMessage, playerName){\r\n\tconsole.log(\"sending name to server: \" + playerName);\r\n\tsocket.emit(socketMessage, playerName);\r\n}\r\n\r\nfunction appendToDOM(playerName, elementLocation) {\r\n\tlet player = document.createElement(\"h3\");\r\n\tlet node = document.createTextNode(playerName);\r\n\tplayer.appendChild(node);\r\n\telementLocation.appendChild(player);\r\n}\r\n\r\nfunction removeFromDOM(playerName, playerList) {\r\n\tif(playerList) {\r\n\t\t[].slice.call(playerList.querySelectorAll(\"h3\")).map(name => {\r\n\t\t\tif(name.innerHTML === playerName)\r\n\t\t\t\tplayerList.removeChild(name); \r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction updatePlayerLists(socket, spectatorName, spectatorList, client) {\r\n\tremoveFromDOM(spectatorName, spectatorList);\r\n\t\r\n\t// handles team changing of clients (you're switching teams if counter > 1)\r\n\tif(client.teamJoinCounter > 1 && client.name == spectatorName){\r\n\t\tif(client.team == \"red\")\r\n\t\t\tsocket.emit('removeFromBlue', spectatorName);\r\n\t\telse if(client.team == \"blue\" && client.name == spectatorName)\r\n\t\t\tsocket.emit('removeFromRed', spectatorName);\r\n\t}\r\n\tclient.isOnATeam = true;\r\n}\r\n\r\nmodule.exports = {\r\n\tsendNameToServer: sendNameToServer,\r\n\tappendToDOM: appendToDOM,\r\n\tremoveFromDOM: removeFromDOM,\r\n\tupdatePlayerLists: updatePlayerLists\r\n}\n\n//# sourceURL=webpack:///./functions/player-setup/name-handlers.js?");

/***/ }),

/***/ "./functions/spymaster-setup/spy-handlers.js":
/*!***************************************************!*\
  !*** ./functions/spymaster-setup/spy-handlers.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const hideShowHandlers = __webpack_require__(/*! ../update/hide-show-handlers */ \"./functions/update/hide-show-handlers.js\");\r\nlet HIDE_ELEMENTS = hideShowHandlers.hideElements;\r\nlet SHOW_ELEMENTS = hideShowHandlers.showElements;\r\n\r\nfunction sendSpyToServer(socket, client) {\r\n    let socketMessage = client.team === 'blue' ? 'blueSpySelected' : 'redSpySelected';\r\n    client.isSpymaster = true;\r\n    socket.emit(socketMessage, client.name);\r\n}\r\n\r\nfunction highlightSpymaster(nameOfSpy, playerList, teamColor) {\r\n    let borderColor = teamColor === 'blue' ? '2px solid lightblue' : '2px solid pink';\r\n\r\n    [].slice.call(playerList.querySelectorAll(\"h3\")).map(player => {\r\n        if(player.innerHTML === nameOfSpy) {\r\n            player.style.background = \"grey\";\r\n\t\t\tplayer.style.border = borderColor;\r\n\t\t\tplayer.style.padding = \"5px\";\r\n        }\r\n    });\r\n}\r\n\r\nfunction removeSpyButton(socket, spymasterName, spyExists, spyTeamColor) {\r\n\tif(spyExists){\r\n        let spyNameID = spyTeamColor === 'blue' ? '#blue-spy-name' : '#red-spy-name';\r\n        let socketMessage = spyTeamColor === 'blue' ? 'highlightBlueSpy' : 'highlightRedSpy';\r\n        document.querySelector(spyNameID).innerHTML = spymasterName;\r\n        \r\n        HIDE_ELEMENTS(\r\n            spyTeamColor === 'blue' \r\n                ? document.querySelector(\"#blue-spy\")\r\n                : document.querySelector(\"#red-spy\"),\r\n            spyTeamColor === 'blue'\r\n                ? document.querySelector(\"#blue-spy-waiting\")\r\n                : document.querySelector(\"#red-spy-waiting\")\r\n        );\r\n        SHOW_ELEMENTS(\r\n            spyTeamColor === 'blue' \r\n                ? document.querySelector(\"#reveal-blue-spy\") \r\n                : document.querySelector(\"#reveal-red-spy\")\r\n        );\r\n        socket.emit(socketMessage, spymasterName);\r\n    }\r\n}\r\n\r\nfunction showSpyButton(client, spyTeamColor) {\r\n    client.isSpymaster = false;\r\n    \r\n    SHOW_ELEMENTS(\r\n        spyTeamColor === 'blue' \r\n            ? document.querySelector(\"#blue-spy\")\r\n            : document.querySelector(\"#red-spy\"),\r\n        spyTeamColor === 'blue'\r\n            ? document.querySelector(\"#blue-spy-waiting\")\r\n            : document.querySelector(\"#red-spy-waiting\")\r\n    );\r\n    HIDE_ELEMENTS(\r\n        spyTeamColor === 'blue' \r\n            ? document.querySelector(\"#reveal-blue-spy\") \r\n            : document.querySelector(\"#reveal-red-spy\")\r\n    );\r\n}\r\n\r\nmodule.exports = {\r\n    sendSpyToServer: sendSpyToServer,\r\n    highlightSpymaster, highlightSpymaster,\r\n    removeSpyButton: removeSpyButton,\r\n    showSpyButton: showSpyButton\r\n}\r\n\n\n//# sourceURL=webpack:///./functions/spymaster-setup/spy-handlers.js?");

/***/ }),

/***/ "./functions/team-setup/team-handlers.js":
/*!***********************************************!*\
  !*** ./functions/team-setup/team-handlers.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const nameHandlers = __webpack_require__(/*! ../player-setup/name-handlers */ \"./functions/player-setup/name-handlers.js\");\r\nconst SEND_NAME_TO_SERVER = nameHandlers.sendNameToServer;\r\n\r\nfunction styleTeamChatBox(teamColor) {\r\n    const teamChatBox = document.querySelector(\"#team-chat-div\");\r\n    teamChatBox.classList.remove(\"chat-black\", \"team-chat-red\", \"team-chat-blue\");\r\n    teamChatBox.classList.add(teamColor)\r\n}\r\n\r\nfunction handleJoinTeam(socket, gameisNotStarted, teamColor, clientData) {\r\n    const { name, team, isSpymaster } = clientData;\r\n\r\n    if(gameisNotStarted && name != '' && team != teamColor){\r\n        let socketMessage = teamColor === 'blue' ? 'playerJoinedBlue' : 'playerJoinedRed';\r\n        let CSS_class = teamColor === 'blue' ? 'team-chat-blue' : 'team-chat-red';\r\n\r\n        SEND_NAME_TO_SERVER(socket, socketMessage, name);\r\n        styleTeamChatBox(CSS_class);\r\n        clientData.team = teamColor;\r\n        clientData.isOnATeam = true;\r\n        clientData.teamJoinCounter++;\r\n\r\n\t\tif(isSpymaster == true) {\r\n            clientData.isSpymaster = false;\r\n            if(teamColor === 'blue') {\r\n                socket.emit('redSpyChangedTeam');\r\n            } else if(teamColor === 'red') {\r\n                socket.emit('blueSpyChangedTeam');\r\n            }\r\n\t\t}\r\n    } \r\n}\r\n\r\nmodule.exports = {\r\n    handleJoinTeam: handleJoinTeam,\r\n    styleTeamChatBox: styleTeamChatBox\r\n}\n\n//# sourceURL=webpack:///./functions/team-setup/team-handlers.js?");

/***/ }),

/***/ "./functions/update/hide-show-handlers.js":
/*!************************************************!*\
  !*** ./functions/update/hide-show-handlers.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function hideElements(...elements){\r\n\telements.map(element => {\r\n\t\tif(element)\r\n\t\t\telement.classList.add(\"hide\");\r\n\t});\r\n}\r\n\r\nfunction showElements(...elements){\r\n\telements.map(element => {\r\n\t\tif(element)\r\n\t\t\telement.classList.remove(\"hide\");\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n    hideElements: hideElements,\r\n    showElements: showElements\r\n}\n\n//# sourceURL=webpack:///./functions/update/hide-show-handlers.js?");

/***/ }),

/***/ "./functions/update/update-handlers.js":
/*!*********************************************!*\
  !*** ./functions/update/update-handlers.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const allCards = document.querySelectorAll(\".card\");\r\nconst gameBoard = document.querySelector(\"#game-board\");\r\n\r\nfunction updateCurrentPlayers(playerNames, elementLocation) {\r\n\tplayerNames.map(playerName => {\r\n\t\tlet player = document.createElement(\"h3\");\r\n\t\tlet node = document.createTextNode(playerName);\r\n\t\tplayer.appendChild(node);\r\n\t\telementLocation.appendChild(player);\r\n\t});\r\n}\r\n\r\nfunction updateBoard({ currentBoardColors }) {\r\n\tfor(let i = 0; i < allCards.length; i++) {\r\n\t\tif(currentBoardColors[i] != 'lightgrey')\r\n\t\t\tallCards[i].classList.add(currentBoardColors[i]);\r\n\t}\r\n}\r\n\r\nfunction updateGameWords(gameData) {\r\n\tif(gameData.gameHasStarted){\r\n\t\tlet gameWords = gameBoard.querySelectorAll(\"p\");\r\n\t\tdocument.querySelector(\"#message\").classList.add(\"hide\");\r\n\r\n\t\tfor(let i = 0; i < gameWords.length; i++) {\r\n\t\t\tgameWords[i].innerHTML = gameData.gameWords[i];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = {\r\n    updateCurrentPlayers: updateCurrentPlayers,\r\n    updateBoard: updateBoard,\r\n    updateGameWords: updateGameWords\r\n}\n\n//# sourceURL=webpack:///./functions/update/update-handlers.js?");

/***/ })

/******/ });