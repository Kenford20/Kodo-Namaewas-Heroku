/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client.js":
/*!*******************!*\
  !*** ./client.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("window.onload=function(){\r\n\tconst host = window.location.origin; \r\n\tconst socket = io.connect(host);\r\n\r\n\t/* module imports */\r\n\tconst nameHandlers = __webpack_require__(/*! ./player-setup/name-handlers */ \"./player-setup/name-handlers.js\");\r\n\tconst appendToDOM = nameHandlers.appendToDOM;\r\n\tconst updateCurrentPlayers = nameHandlers.updateCurrentPlayers;\r\n\r\n/* Global variables\r\n**********************************/\r\nconst joinBlue_btn = document.querySelector(\"#blue-join-btn\");\r\nconst joinRed_btn = document.querySelector(\"#red-join-btn\");\r\nconst redSpy_btn = document.querySelector(\"#red-spy\");\r\nconst blueSpy_btn = document.querySelector(\"#blue-spy\");\r\nconst startGame_btn = document.querySelector(\"#start-game\");\r\nconst restartGame_btn = document.querySelector(\"#restart-game\");\r\nconst submitName_btn = document.querySelector(\"#name-btn\");\r\n\r\nconst blueScoreValue = document.querySelector(\"#blue-score-number\");\r\nconst redScoreValue = document.querySelector(\"#red-score-number\");\r\nconst hintInput = document.querySelector(\"#hint-input-container\");\r\nconst nameInput = document.querySelector(\"#name-input\");\r\nconst chat = document.querySelector(\"#chat\");\r\nconst chatInput = document.querySelector(\"#chat-input\");\r\nconst teamChatInput = document.querySelector(\"#team-chat-input\");\r\nconst chatBox = document.querySelector(\"#global-message-box\");\r\nconst teamChatBox = document.querySelector(\"#team-message-box\");\r\nconst gameBoard = document.querySelector(\"#game-board\");\r\nconst allCards = document.querySelectorAll(\".card\");\r\n\r\nconst blueWaitingMessage = document.querySelector(\"#blue-waiting\");\r\nconst redWaitingMessage = document.querySelector(\"#red-waiting\");\r\nconst blueGuessMessage = document.querySelector(\"#blue-guess\");\r\nconst redGuessMessage = document.querySelector(\"#red-guess\");\r\nconst resetMessage = document.querySelector(\"#reset-message\");\r\n\r\nconst spectatorList = document.querySelector(\"#players\");\r\nconst bluePlayerList = document.querySelector(\"#blue-players\");\r\nconst redPlayerList = document.querySelector(\"#red-players\");\r\n\r\nconst client = {\r\n\tname: '',\r\n\tteam: '',\r\n\tspymaster: false,\r\n\tyourTurn: false,\r\n\tteamJoinCounter: 0,\r\n\tisOnATeam: false,\r\n\tcanGuess: false\r\n};\r\n\r\nconst cardType = {\r\n\tredTeamStarts: ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'black'],\r\n\tblueTeamStarts: ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'black'],\r\n};\r\n\r\nlet gameisNotStarted = true;\r\nlet thereIsABlueSpy = false; \r\nlet thereIsARedSpy = false;\r\n\r\n/* Function Definitions\r\n*************************************/\r\nfunction hideElements(...elements){\r\n\telements.map(element => element.classList.add(\"hide\"));\r\n}\r\n\r\nfunction showElements(...elements){\r\n\telements.map(element => element.classList.remove(\"hide\"));\r\n}\r\n\r\n// the functions below generate the HTML of each player with their respect teams to\r\n// the currently connected clients and also the ones that join later\r\nfunction sendNameToServer(){\r\n\tconsole.log(\"the name is \" + nameInput.value);\r\n\tsocket.emit('playerName', nameInput.value);\r\n\tclient.name = nameInput.value;\r\n\thideElements(submitName_btn, nameInput);\r\n}\r\n\r\n// update functions below update joining clients' DOMs by appending the player names to their respective nodes\r\n// as well as the current state of the board if a round had began\r\n// function currentSpectators(allSpectators){\r\n// \tupdateCurrentPlayers(allSpectators, spectatorList);\r\n// }\r\n\r\n// function currentBluePlayers(allBluePlayers){\r\n// \tupdateCurrentPlayers(allBluePlayers, bluePlayerList);\r\n// }\r\n\r\n// function currentRedPlayers(allRedPlayers){\r\n// \tupdateCurrentPlayers(allRedPlayers, redPlayerList);\r\n// }\r\n\r\n// function updateCurrentPlayers(playerNames, elementLocation){\r\n// \tplayerNames.map(playerName => {\r\n// \t\tlet player = document.createElement(\"h3\");\r\n// \t\tlet node = document.createTextNode(playerName + \"  \");\r\n// \t\tplayer.appendChild(node);\r\n// \t\telementLocation.appendChild(player);\r\n// \t});\r\n// }\r\n\r\nfunction updateBoard(gameData){\r\n\tfor(let i = 0; i < allCards.length; i++){\r\n\t\tif(gameData.currentBoardColors[i] != 'lightgrey')\r\n\t\t\tallCards[i].classList.add(gameData.currentBoardColors[i]);\r\n\t}\r\n}\r\n\r\nfunction updateGameWords(gameData){\r\n\tif(gameData.gameHasStarted){\r\n\t\tlet gameWords = gameBoard.querySelectorAll(\"p\");\t\r\n\t\tfor(let i = 0; i < gameWords.length; i++){\r\n\t\t\tgameWords[i].innerHTML = gameData.gameWords[i];\r\n\t\t}\r\n\t\tdocument.querySelector(\"#message\").classList.add(\"hide\");\r\n\t}\r\n}\r\n\r\n// you can join a team if game has not started yet\r\n// you cannot join a team that you're already on\r\n// you cannot join a team unless you have a name\r\nfunction joinBlueTeam(){\r\n\tif(gameisNotStarted && client.name != '' && client.team != 'blue'){\r\n\t\tsocket.emit('blue', client.name);\r\n\t\tclient.team = 'blue';\r\n\t\tclient.teamJoinCounter++;\r\n\t\t// style team chat box border to blue\r\n\t\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"chat-black\");\r\n\t\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"team-chat-red\");\r\n\t\tdocument.querySelector(\"#team-chat-div\").classList.add(\"team-chat-blue\");\r\n\t\tif(client.spymaster == true){\r\n\t\t\tclient.spymaster = false;\r\n\t\t\tsocket.emit('redSpyChangedTeam');\r\n\t\t}\r\n\t\t// hide spectator section for less clutter on mobile view\r\n\t\t// if(window.innerWidth <= 480) {\r\n\t\t// \thideElements(document.querySelector(\"#spectators\"));\r\n\t\t// \tdocument.querySelector(\"body\").style.gridTemplateRows = \"100px 0px 75px 75px 50px 100px 500px 100px 50px 200px\"\r\n\t\t// }\r\n\t}\r\n}\r\n\r\nfunction joinRedTeam(){\r\n\tif(gameisNotStarted && client.name != '' && client.team != 'red'){\r\n\t\tsocket.emit('red', client.name);\r\n\t\tclient.team = 'red';\r\n\t\tclient.teamJoinCounter++;\r\n\t\t// style team chat box border to red\r\n\t\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"chat-black\");\r\n\t\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"team-chat-blue\");\r\n\t\tdocument.querySelector(\"#team-chat-div\").classList.add(\"team-chat-red\");\r\n\t\tif(client.spymaster == true){\r\n\t\t\tclient.spymaster = false;\r\n\t\t\tsocket.emit('blueSpyChangedTeam');\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// take your name out of the spectator list once you join a team\r\nfunction removeSpectator(playerName){\r\n\tlet spectators \t= spectatorList.querySelectorAll(\"h3\");\r\n\tfor(let i = 0; i < spectators.length; i++){\r\n\t\tif(spectators[i].innerHTML == (playerName + '  '))\r\n\t\t\tspectatorList.removeChild(spectators[i]);\r\n\t}\r\n\tconsole.log(client.name + \" is on a team: \" + client.isOnATeam);\r\n\r\n\t// handles team changing of clients (you're switching teams if counter > 1)\r\n\tif(client.teamJoinCounter > 1 && client.name == playerName){\r\n\t\tif(client.team == \"red\")\r\n\t\t\tsocket.emit('removeFromBlue', playerName);\r\n\t\telse if(client.team == \"blue\" && client.name == playerName)\r\n\t\t\tsocket.emit('removeFromRed', playerName);\r\n\t}\r\n\tclient.isOnATeam = true;\r\n}\r\n\r\n// send client information to server about the spies\r\nfunction redSpyMaster(){\r\n\tif(client.team == 'red'){\r\n\t\tclient.spymaster = true;\r\n\t\tsocket.emit('redSpy', client.name);\r\n\t}\r\n}\r\n\r\nfunction blueSpyMaster(){\r\n\tif(client.team == 'blue'){\r\n\t\tclient.spymaster = true;\r\n\t\tsocket.emit('blueSpy', client.name);\r\n\t}\r\n}\r\n\r\n// remove spy button if someone has selected it already and reveal message that shows who the spy is\r\nfunction removeRedSpyButton({ redSpyExists, redSpyMaster }){\r\n\tif(redSpyExists){\r\n\t\tdocument.querySelector(\"#red-spy-name\").innerHTML = redSpyMaster;\r\n\t\t\r\n\t\thideElements(redSpy_btn, document.querySelector(\"#red-spy-waiting\"));\r\n\t\tshowElements(document.querySelector(\"#reveal-red-spy\"));\r\n\t\tthereIsARedSpy = true;\r\n\t\tsocket.emit('highlightRedSpy', redSpyMaster);\r\n\t}\r\n}\r\n\r\nfunction removeBlueSpyButton({ blueSpyExists, blueSpyMaster }){\r\n\tif(blueSpyExists){\r\n\t\tdocument.querySelector(\"#blue-spy-name\").innerHTML = blueSpyMaster;\r\n\r\n\t\thideElements(blueSpy_btn, document.querySelector(\"#blue-spy-waiting\"));\r\n\t\tshowElements(document.querySelector(\"#reveal-blue-spy\"));\r\n\t\tthereIsABlueSpy = true;\r\n\t\tsocket.emit('highlightBlueSpy', blueSpyMaster);\r\n\t}\r\n}\r\n\r\n// adds a css background to the player that is the spy master for everyone to see\r\nfunction highlightRedSpy(nameOfSpy){\r\n\tlet redPlayers = redPlayerList.querySelectorAll(\"h3\");\r\n\tfor(let i = 0; i < redPlayers.length; i++){\r\n\t\tif(redPlayers[i].innerHTML == (nameOfSpy + '  ')){\r\n\t\t\tredPlayers[i].style.background = \"grey\";\r\n\t\t\tredPlayers[i].style.border = \"2px solid lightgrey\";\r\n\t\t\tredPlayers[i].style.padding = \"5px\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction highlightBlueSpy(nameOfSpy){\r\n\tlet bluePlayers = bluePlayerList.querySelectorAll(\"h3\");\r\n\tfor(let i = 0; i < bluePlayers.length; i++){\r\n\t\tif(bluePlayers[i].innerHTML == (nameOfSpy + '  ')){\r\n\t\t\tbluePlayers[i].style.background = \"grey\";\r\n\t\t\tbluePlayers[i].style.border = \"2px solid lightblue\"\r\n\t\t\tbluePlayers[i].style.padding = \"5px\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// removes the HTML and name of a exiting or team switching player\r\nfunction removeBluePlayer(playerName){\r\n\t// blue player switches to red team\r\n\tlet bluePlayers = bluePlayerList.querySelectorAll(\"h3\");\r\n\tfor(let i = 0; i < bluePlayers.length; i++){\r\n\t\tif(bluePlayers[i].innerHTML == (playerName + '  '))\r\n\t\t\tbluePlayerList.removeChild(bluePlayers[i]);\r\n\t}\r\n}\r\n\r\nfunction removeRedPlayer(playerName){\r\n\t// red player switches to blue team\r\n\tlet redPlayers = redPlayerList.querySelectorAll(\"h3\");\r\n\tfor(let i = 0; i < redPlayers.length; i++){\r\n\t\tif(redPlayers[i].innerHTML == (playerName + '  '))\r\n\t\t\tredPlayerList.removeChild(redPlayers[i]);\r\n\t}\r\n}\r\n\r\n// need to show the spy button when a current spy leaves so that a new player can be it\r\nfunction showBlueSpyButton(){\r\n\tclient.spymaster = false;\r\n\tshowElements(blueSpy_btn, document.querySelector(\"#blue-spy-waiting\"));\r\n\thideElements(document.querySelector(\"#reveal-blue-spy\"));\r\n}\r\n\r\nfunction showRedSpyButton(){\r\n\tclient.spymaster = false;\r\n\tshowElements(redSpy_btn, document.querySelector(\"#red-spy-waiting\"));\r\n\thideElements(document.querySelector(\"#reveal-red-spy\"));\r\n}\r\n\r\n/* \r\n****************************************************************\r\n************ GAME HAS NOW STARTED BELOW ************************\r\n****************************************************************/\r\n\r\n// takes an array of the board's card positions and shuffles the indices around\r\nfunction shuffleNumbers(cardPositions) {\r\n    let i = cardPositions.length;\r\n    let j = 0;\r\n    let temp;\r\n\r\n    while (i--) {\r\n    \t// generates a random index to swap with\r\n        j = Math.floor(Math.random() * (i+1));\r\n\r\n        // swap randomly chosen element with current element\r\n        temp = cardPositions[i];\r\n        cardPositions[i] = cardPositions[j];\r\n        cardPositions[j] = temp;\r\n    }\r\n    return cardPositions;\r\n}\r\n\r\nfunction gameStartSetup(){\r\n\tsocket.emit('gameHasStarted');\r\n\r\n\t// start game only when the two spymasters are chosen\r\n\tif(thereIsABlueSpy && thereIsARedSpy && gameisNotStarted){\r\n\t\tlet boardData = {\r\n\t\t\trandomIndices: [],\r\n\t\t\tdivColors: []\r\n\t\t}\r\n\t\tlet randomNumbers = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24];\r\n\r\n\t\tshuffleNumbers(randomNumbers);\r\n\t\tboardData.randomIndices = randomNumbers;\r\n\t\tlet randomTeamStarts = Math.floor(Math.random() * 2); // returns 0 or 1\r\n\r\n\t\tif(randomTeamStarts == 0){\r\n\t\t\tboardData.divColors = cardType.blueTeamStarts;\r\n\t\t\tsocket.emit('blueTeamStarts');\r\n\t\t}\r\n\t\telse if(randomTeamStarts == 1){\r\n\t\t\tboardData.divColors = cardType.redTeamStarts;\r\n\t\t\tsocket.emit('redTeamStarts');\r\n\t\t}\r\n\t\tsocket.emit('setUpBoardforSpies', boardData);\r\n\t\tsocket.emit('showRestartButton');\r\n\r\n\t\t// about 1000 words in this file, can add/remove any words you want to play with in this file\r\n\t\tlet possibleWords = getWordsFromFile(\"words.txt\");\r\n\t\tlet boardWords = [];\r\n\r\n\t\t// take random words from the file of words and push them to the array of 25 words for the game board\r\n\t\tfor(let i = 0; i < 25; i++){\r\n\t\t\tlet randomWord = Math.floor(Math.random() * possibleWords.length);\r\n\t\t\tboardWords.push(possibleWords[randomWord]);\r\n\t\t}\r\n\t\tsocket.emit('setUpGameWords', boardWords);\r\n\t} else {\r\n\t\talert('You need atleast 4 players to play, 2 Supaimasutas and 2 guessers!');\r\n\t}\r\n}\r\n\r\n// reveals the scores for both teams when game starts\r\nfunction showScores(gameData){\r\n\tblueScoreValue.innerHTML = gameData.numBlueCards;\r\n\tredScoreValue.innerHTML = gameData.numRedCards;\r\n\t//showElements(document.querySelector(\"#blue-score\"), document.querySelector(\"#red-score\"));\r\n\tdocument.querySelector(\"#blue-score\").style.display = \"inline-block\";\r\n\tdocument.querySelector(\"#red-score\").style.display = \"inline-block\";\r\n}\r\n\r\n// updates the scores whenever a card is picked\r\nfunction updateScore(gameData){\r\n\tblueScoreValue.innerHTML = gameData.numBlueCards;\r\n\tredScoreValue.innerHTML = gameData.numRedCards;\r\n}\r\n\r\nfunction setUpGameWords(boardWords){\r\n\tlet gameWords = gameBoard.querySelectorAll(\"p\");\r\n\tfor(let i = 0; i < gameWords.length; i++)\r\n\t\tgameWords[i].innerHTML = boardWords[i];\r\n}\r\n\r\nfunction getWordsFromFile(file){\r\n\tlet fileWords;\r\n    let rawFile = new XMLHttpRequest();\r\n    rawFile.open(\"GET\", file, false);\r\n    rawFile.onreadystatechange = function (){\r\n        if(rawFile.readyState === 4){\r\n            if(rawFile.status === 200 || rawFile.status == 0){\r\n                let allWords = rawFile.responseText;\r\n                fileWords = allWords.split('\\n');\r\n            }\r\n        }\r\n    }\r\n    rawFile.send(null);\r\n    return fileWords;\r\n}\r\n\r\nfunction updateGameStatus(){\r\n\tgameisNotStarted = false;\r\n}\r\n\r\nfunction spyMasterBoard(boardObject){\r\n\t// assign random color to each div or card on the game board\r\n\tfor(let i = 0; i < allCards.length; i++){\r\n\t\tlet randomIndex = boardObject.randomIndices[i];\r\n\t\tlet randomCardColor = boardObject.divColors[randomIndex];\r\n\t\tallCards[i].classList.add(randomCardColor);\r\n\t}\r\n}\r\n\r\nfunction createHintBox({ isBlueTurn, numBlueCards, numRedCards }){\r\n\tshowElements(\r\n\t\tdocument.querySelector(\"#hint-input-container\")\r\n\t);\r\n\tlet selectNode = document.createElement(\"select\");\r\n\tdocument.querySelector(\"#hint-input-container\").insertBefore(selectNode, document.querySelector(\"#hint-input-container\").firstChild);\r\n\tlet numCards = isBlueTurn ? numBlueCards : numRedCards;\r\n\r\n\t// create dropdown menu for number of guesses to the hint\r\n    for(let i = 1; i < (numCards+1); i++){\r\n    \tlet selectOption = document.createElement(\"option\");\r\n    \tselectOption.setAttribute(\"value\", i);\r\n    \tselectOption.innerHTML = i;\r\n    \tselectNode.appendChild(selectOption);\r\n\t}\r\n}\r\n\r\nfunction blueTeamWaits({ gameOver }){\r\n\tif(!gameOver){\r\n\t\thideElements(\r\n\t\t\tredWaitingMessage, \r\n\t\t\tredGuessMessage, \r\n\t\t\tresetMessage, \r\n\t\t\tdocument.querySelector(\"#hint-message\"), \r\n\t\t\tdocument.querySelector(\"#message\")\r\n\t\t);\r\n\t\tshowElements(blueWaitingMessage);\r\n\t}\r\n}\r\n\r\nfunction redTeamWaits({ gameOver }){\r\n\tif(!gameOver){\r\n\t\thideElements(\r\n\t\t\tblueWaitingMessage,\r\n\t\t\tblueGuessMessage,\r\n\t\t\tresetMessage,\r\n\t\t\tdocument.querySelector(\"#hint-message\"), \r\n\t\t\tdocument.querySelector(\"#message\")\r\n\t\t);\r\n\t\tshowElements(redWaitingMessage);\r\n\t}\r\n}\r\n\r\n// runs when hint submission button is clicked\r\n// hides the hint input from the spy master once the hint is submitted\r\nfunction startGuess(){\r\n\tsocket.emit('guessMessage');\r\n\r\n\tconst hintData = {\r\n\t\tword: '',\r\n\t\tnumber: 0,\r\n\t\tisBlueTurn: false,\r\n\t\tisRedTurn: false\r\n\t};\r\n\r\n\thintData.word = document.querySelector(\"#input-hint\").value;\r\n\thintData.number = document.querySelector(\"select\").value;\r\n\tsocket.emit('hintSubmitted', hintData);\r\n\r\n\thideElements(hintInput)\r\n\r\n\tlet select = document.querySelector(\"select\");\r\n\tselect.parentNode.removeChild(select);\r\n\r\n\tsocket.emit('readyToGuess');\r\n}\r\n\r\n// reveals a message to all clients prompting them to guess\r\nfunction guessMessage({ isBlueTurn }){\r\n\thideElements(resetMessage);\r\n\tif(isBlueTurn){\r\n\t\thideElements(blueWaitingMessage);\r\n\t\tshowElements(blueGuessMessage);\r\n\t}\r\n\telse{\r\n\t\thideElements(redWaitingMessage);\r\n\t\tshowElements(redGuessMessage);\r\n\t}\r\n}\r\n\r\n// reveals the hint to all clients, showing the word and number\r\nfunction revealHint(hintData){\r\n\tshowElements(document.querySelector(\"#hint-message\"));\r\n\tdocument.querySelector(\"#hint-word\").innerHTML = hintData.word;\r\n\tdocument.querySelector(\"#hint-number\").innerHTML = hintData.number;\r\n\r\n\t// styling the hint spans\r\n\tif(hintData.isBlueTurn){\r\n\t\tdocument.querySelector(\"#hint-word\").style.color = \"#1c64ff\";\r\n\t\tdocument.querySelector(\"#hint-number\").style.color = \"#1c64ff\";\r\n\t}\r\n\telse{\r\n\t\tdocument.querySelector(\"#hint-word\").style.color = \"#db3328\";\r\n\t\tdocument.querySelector(\"#hint-number\").style.color = \"#db3328\";\r\n\t}\r\n}\r\n\r\n// boolean controlled by the server (will only run for clients when it is their turn to guess)\r\nfunction pickCards(){\r\n\tclient.canGuess = true;\r\n}\r\n\r\n// determines which card was selected based on the index in the array of cards\r\nfunction whichCardWasPicked(){\r\n\tconst { canGuess, name } = client;\r\n\tif(canGuess){ \r\n\t\t// allCards is a nodeList created from querySelectorAll\r\n\t\t// the assignment below turns it into an array to allow for use of array methods\r\n\t\tlet allCardsArray = [].slice.call(allCards);\r\n\t\tsocket.emit('cardWasPicked', allCardsArray.indexOf(this));\r\n\t\tsocket.emit('showGuesser', name);\r\n\t}\r\n}\r\n\r\n// reveals the div that shows who guessed the lastly guessed word\r\nfunction showGuesser({ isBlueTurn, isRedTurn, cardSelected, playerWhoGuessed }){\r\n\tif(isBlueTurn){\r\n\t\tdocument.querySelector(\"#blue-guess-name\").innerHTML = playerWhoGuessed;\r\n\t\tlet wordPicked = allCards[cardSelected].querySelector(\"p\").innerHTML\r\n\t\tdocument.querySelector(\"#blue-guess-word\").innerHTML = wordPicked;\r\n\t\tshowElements(document.querySelector(\"#blue-guesser\"));\r\n\t}\r\n\telse if(isRedTurn){\r\n\t\tdocument.querySelector(\"#red-guess-name\").innerHTML = playerWhoGuessed;\r\n\t\tlet wordPicked = allCards[cardSelected].querySelector(\"p\").innerHTML\r\n\t\tdocument.querySelector(\"#red-guess-word\").innerHTML = wordPicked;\r\n\t\tshowElements(document.querySelector(\"#red-guesser\"));\r\n\t}\r\n}\r\n\r\n// just changes styles for spies when a card is selected so they know what the guesses are\r\nfunction revealCardForSpies({ cardSelected, gameBoardColors }){\r\n\tlet word = allCards[cardSelected].querySelector(\"p\");\r\n\tword.style.textDecoration = \"line-through\";\r\n\tallCards[cardSelected].classList.remove('rotate');\r\n\r\n\tif(gameBoardColors[cardSelected] == 'blue'){\r\n\t\tallCards[cardSelected].classList.remove('blue');\r\n\t\tallCards[cardSelected].classList.add('blue2');\r\n\t}\r\n\telse if(gameBoardColors[cardSelected] == 'red'){\r\n\t\tallCards[cardSelected].classList.remove('red');\r\n\t\tallCards[cardSelected].classList.add('red2');\r\n\t}\r\n\telse if(gameBoardColors[cardSelected] == 'yellow'){\r\n\t\tallCards[cardSelected].classList.remove('yellow');\r\n\t\tallCards[cardSelected].classList.add('yellow2');\t\t\r\n\t}\r\n\telse{\r\n\t\tallCards[cardSelected].classList.remove('black');\r\n\t\tallCards[cardSelected].classList.add('black2');\r\n\t}\r\n\tallCards[cardSelected].classList.add('rotate');\r\n}\r\n\r\n// receives the selected card from above and reveals its true color from the game board\r\n// turn ends when the number of selected cards match the number given in the hint\r\n// turn also ends when a yellow or a card from the opposite team is selected\r\nfunction revealCardColor({ cardSelected, gameBoardColors, numCardsPicked, numCardsToGuess, isBlueTurn, isRedTurn }){\t\r\n\tallCards[cardSelected].classList.remove(\"default\");\r\n\tallCards[cardSelected].classList.add(gameBoardColors[cardSelected]);\r\n\tallCards[cardSelected].classList.remove('rotate');\r\n\tsocket.emit('updateCardCount', gameBoardColors[cardSelected]);\r\n\r\n\tif(numCardsPicked < numCardsToGuess){\r\n\t\tif((isBlueTurn && gameBoardColors[cardSelected] == 'red') ||\r\n\t\t   (isRedTurn && gameBoardColors[cardSelected] == 'blue') ||\r\n\t\t   gameBoardColors[cardSelected] == 'yellow'){\r\n\t\t\t\tsocket.emit('endTurn');\r\n\t\t}\r\n\t\tif(gameBoardColors[cardSelected] == 'black')\r\n\t\t\tsocket.emit('blackCard');\r\n\t}\r\n\telse{\r\n\t\tif(gameBoardColors[cardSelected] == 'black')\r\n\t\t\tsocket.emit('blackCard');\r\n\t\telse{\r\n\t\t\tsocket.emit('updateCardCount', gameBoardColors[cardSelected]);\r\n\t\t\tsocket.emit('endTurn');\r\n\t\t}\r\n\t}\r\n\tallCards[cardSelected].classList.add('rotate');\r\n}\r\n\r\n// players aren't allowed to guess/select cards during the hinting phase \r\nfunction disableEventListeners(){\r\n\tclient.canGuess = false;\r\n}\r\n\r\nfunction blueWins(){\r\n\tdocument.querySelector(\"#congrats\").classList.add(\"blue-word\");\r\n\tshowElements(\r\n\t\tdocument.querySelector(\"#blue-wins\"),\r\n\t\tdocument.querySelector(\"#congrats\")\r\n\t);\r\n\thideElements(\r\n\t\tdocument.querySelector(\"#hint-message\"),\r\n\t\tblueWaitingMessage,\r\n\t\tredWaitingMessage,\r\n\t\tblueGuessMessage,\r\n\t\tredGuessMessage\r\n\t);\r\n}\r\n\r\nfunction redWins(){\r\n\tdocument.querySelector(\"#congrats\").classList.add(\"red-word\");\r\n\tshowElements(\r\n\t\tdocument.querySelector(\"#red-wins\"),\r\n\t\tdocument.querySelector(\"#congrats\")\r\n\t);\r\n\thideElements(\r\n\t\tdocument.querySelector(\"#hint-message\"),\r\n\t\tblueWaitingMessage,\r\n\t\tredWaitingMessage,\r\n\t\tblueGuessMessage,\r\n\t\tredGuessMessage\r\n\t);\r\n}\r\n\r\n// chat functions\r\nfunction chatEntered(){\r\n\tif(event.keyCode == 13){\r\n\t\tconst { name } = client;\r\n\t\tif(name != ''){\r\n\t\t\tconst chatData = {\r\n\t\t\t\tchatter: '',\r\n\t\t\t\tchatMessage: ''\r\n\t\t\t};\r\n\t\t\tchatData.chatter = name;\r\n\t\t\tchatData.chatMessage = chatInput.value;\r\n\t\t\tsocket.emit('someoneChatted', chatData);\r\n\t\t\tchatInput.value = '';\r\n\t\t}\r\n\t\telse{\r\n\t\t\tchatInput.value = '';\r\n\t\t\talert(\"Please enter a name before you chat!\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction teamChatEntered(){\r\n\tif(event.keyCode == 13){\r\n\t\tconst { team, name } = client;\r\n\t\tif(team != ''){\r\n\t\t\tconst teamChatData = {\r\n\t\t\t\tteamChatter: '',\r\n\t\t\t\tchatterTeamColor: '',\r\n\t\t\t\tteamChatMessage: ''\r\n\t\t\t};\r\n\t\t\tteamChatData.teamChatter = name;\r\n\t\t\tteamChatData.chatterTeamColor = team;\r\n\t\t\tteamChatData.teamChatMessage = teamChatInput.value;\r\n\t\t\tsocket.emit('teamChat', teamChatData);\r\n\t\t\tteamChatInput.value = '';\r\n\t\t}\r\n\t\telse{\r\n\t\t\tteamChatInput.value = '';\r\n\t\t\talert(\"Please join a team before using team chat!\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction displayChatMessage({ chatter, chatMessage, isTeamMessage }){\r\n\tsocket.emit('chatterSpan');\r\n\r\n\tlet message = document.createElement(\"h5\");\r\n\tlet chatterName = document.createElement(\"span\");\r\n\tlet chatterNode = document.createTextNode(chatter);\r\n\tchatterName.appendChild(chatterNode);\r\n\tmessage.appendChild(chatterName);\r\n\r\n\tlet chatText = \": \" + chatMessage;\r\n\tlet messageNode = document.createTextNode(chatText);\r\n\tmessage.appendChild(messageNode);\r\n\tmessage.classList.add(\"chat-message\");\r\n\r\n\t// create the message in the team chat box if message was entered in there\r\n\tif(isTeamMessage)\r\n\t\tteamChatBox.appendChild(message);\r\n\t// else create it in the global chat box\r\n\telse\r\n\t\tchatBox.appendChild(message);\r\n\r\n\t// keeps the chatbox at the bottom of the scrollbar after overflow occurs within the chatbox div\r\n\tchatBox.scrollTop = chatBox.scrollHeight;\r\n\tteamChatBox.scrollTop = teamChatBox.scrollHeight;\r\n}\r\n\r\n// styles the client's name in the chatbox to differentiate from the other players chat message\r\nfunction highlightChatter(){\r\n\tlet chatterNames = [].slice.call(chat.querySelectorAll(\"span\"));\r\n\t\r\n\tchatterNames.filter(names => names.innerHTML == client.name)\r\n\t.map(name => name.classList.add('highlight-chatter'));\r\n}\r\n\r\n/* Restarting the game */\r\nfunction restartGame(){\r\n\tsocket.emit('restartGame');\r\n}\r\n\r\n// removes all the classes from the card divs to reset the board\r\nfunction newBoard({ currentBoardColors }){\r\n\tfor(let i = 0; i < currentBoardColors.length; i++){\r\n\t\tallCards[i].classList.remove(\"red\");\r\n\t\tallCards[i].classList.remove(\"blue\");\r\n\t\tallCards[i].classList.remove(\"yellow\");\r\n\t\tallCards[i].classList.remove(\"black\");\r\n\t}\r\n}\r\n\r\nfunction resetSpyBoard(){\r\n\tfor(let i = 0; i < allCards.length; i++){\r\n\t\tallCards[i].classList.remove(\"red2\");\r\n\t\tallCards[i].classList.remove(\"blue2\");\r\n\t\tallCards[i].classList.remove(\"yellow2\");\r\n\t\tallCards[i].classList.remove(\"black2\");\r\n\r\n\t\tlet word = allCards[i].querySelector(\"p\");\r\n\t}\r\n\thideElements(hintInput);\r\n\r\n\tlet select = document.querySelector(\"select\");\r\n\tselect.parentNode.removeChild(select);\r\n}\r\n\r\n// [].slice.call converts the nodelist returned from querySelectorAll into an array\r\nfunction resetChat(){\r\n\tlet allGlobalMessages = [].slice.call(chatBox.querySelectorAll(\"h5\"));\r\n\tlet allTeamMessages = [].slice.call(teamChatBox.querySelectorAll(\"h5\"));\r\n\r\n\tallGlobalMessages.map(message => chatBox.removeChild(message));\r\n\tallTeamMessages.map(message => teamChatBox.removeChild(message));\r\n}\r\n\r\nfunction resetWords(){\r\n\tlet gameWords = [].slice.call(gameBoard.querySelectorAll(\"a\"));\r\n\tgameWords.map((word, index) => word.innerHTML = 'Word' + (index + 1));\t\r\n}\r\n\r\nfunction removePlayers({ allPlayers }){\r\n\t// reset all client data\r\n\tclient.team = '';\r\n\tclient.spymaster = false;\r\n\tclient.yourTurn = false;\r\n\tclient.teamJoinCounter = 0;\r\n\tclient.isOnATeam = false;\r\n\tclient.canGuess = false;\r\n\r\n\tgameisNotStarted = true;\r\n\tthereIsABlueSpy = false; \r\n\tthereIsARedSpy = false;\r\n\r\n\t// remove all the player names from the client's browser\r\n\tfor(let i = 0; i < allPlayers.length; i++){\r\n\t\tremoveSpectator(allPlayers[i]);\r\n\t\tremoveBluePlayer(allPlayers[i]);\r\n\t\tremoveRedPlayer(allPlayers[i]);\r\n\t}\r\n\r\n\t// reset all buttons and messages\r\n\tshowElements(\r\n\t\tblueSpy_btn,\r\n\t\tredSpy_btn,\r\n\t\tsubmitName_btn,\r\n\t\tname,\r\n\t\tresetMessage,\r\n\t\tdocument.querySelector(\"#message\")\r\n\t);\r\n\thideElements(\r\n\t\tdocument.querySelector(\"#blue-spy-message\"),\r\n\t\tdocument.querySelector(\"#red-spy-message\"),\r\n\t\tdocument.querySelector(\"#blue-wins\"),\r\n\t\tdocument.querySelector(\"#red-wins\"),\r\n\t\tdocument.querySelector(\"#congrats\"),\r\n\t\tdocument.querySelector(\"#hint-message\"),\r\n\t\tdocument.querySelector(\"#blue-guesser\"),\r\n\t\tdocument.querySelector(\"#red-guesser\"),\r\n\t\tdocument.querySelector(\"#chat\"),\r\n\t\tdocument.querySelector(\"#message\"),\r\n\t\tdocument.querySelector(\"#blue-score\"),\r\n\t\tdocument.querySelector(\"#red-score\"),\r\n\t\tblueWaitingMessage,\r\n\t\tredWaitingMessage,\r\n\t\tblueGuessMessage,\r\n\t\tredGuessMessage\r\n\t);\r\n\t// reset team chat border color\r\n\tdocument.querySelector(\"#team-chat-div\").classList.add(\"chat-black\");\r\n\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"team-chat-blue\");\r\n\tdocument.querySelector(\"#team-chat-div\").classList.remove(\"team-chat-red\");\r\n}\r\n\r\n/* Sockets\r\n**************************************/\r\nsocket.on('playerNames', (spectatorName) => appendToDOM(spectatorName, spectatorList));\r\nsocket.on('displayChatMessage', displayChatMessage);\r\nsocket.on('displayTeamChat', displayChatMessage);\r\nsocket.on('showClientChatter', highlightChatter);\r\n// updating new players who joined later than others\r\nsocket.on('allSpectators', (spectators) => updateCurrentPlayers(spectators, spectatorList));\r\nsocket.on('allBluePlayers', (bluePlayers) => updateCurrentPlayers(bluePlayers, bluePlayerList));\r\nsocket.on('allRedPlayers', (redPlayers) => updateCurrentPlayers(redPlayers,  redPlayerList));\r\nsocket.on('nameOfBlueSpy', removeBlueSpyButton);\r\nsocket.on('nameOfRedSpy', removeRedSpyButton);\r\nsocket.on('updateBoard', updateBoard);\r\nsocket.on('updateGameWords', updateGameWords);\r\n\r\n// move the clients' name to their respective teams\r\nsocket.on('bluePlayer', (bluePlayerName) => appendToDOM(bluePlayerName, bluePlayerList));\r\nsocket.on('redPlayer', (redPlayerName) => appendToDOM(redPlayerName, redPlayerList));\r\nsocket.on('removeSpectator', removeSpectator);\r\nsocket.on('bluePlayerLeft', removeBluePlayer);\r\nsocket.on('redPlayerLeft', removeRedPlayer);\r\nsocket.on('spectatorLeft', removeSpectator);\r\n\r\n// spy stuff setup\r\nsocket.on('someoneBecameBlueSpy', removeBlueSpyButton);\r\nsocket.on('someoneBecameRedSpy', removeRedSpyButton);\r\nsocket.on('highlightBlueSpy', highlightBlueSpy);\r\nsocket.on('highlightRedSpy', highlightRedSpy);\r\nsocket.on('blueSpyLeft', showBlueSpyButton);\r\nsocket.on('redSpyLeft', showRedSpyButton);\r\nsocket.on('blueSpyChangedTeam', showBlueSpyButton);\r\nsocket.on('redSpyChangedTeam', showRedSpyButton);\r\n\r\n// game started\r\nsocket.on('gameHasStarted', updateGameStatus);\r\nsocket.on('showScores', showScores);\r\nsocket.on('setUpGameWords', setUpGameWords);\r\nsocket.on('youCanSeeTheBoard', spyMasterBoard);\r\nsocket.on('createHintBox', createHintBox);\r\nsocket.on('waitingForBlueSpy', blueTeamWaits);\r\nsocket.on('waitingForRedSpy', redTeamWaits);\r\nsocket.on('guessMessage', guessMessage);\r\nsocket.on('revealHint', revealHint);\r\nsocket.on('pickCards', pickCards);\r\nsocket.on('showGuesser', showGuesser);\r\nsocket.on('updateScore', updateScore);\r\nsocket.on('revealCardColor', revealCardColor);\r\nsocket.on('guessHasBeenMade', revealCardForSpies);\r\nsocket.on('donePickingCards', disableEventListeners);\r\nsocket.on('blueWins', blueWins);\r\nsocket.on('redWins', redWins);\r\nsocket.on('restartingGame', removePlayers);\r\nsocket.on('resetSpyBoard', resetSpyBoard);\r\nsocket.on('resetTheChat', resetChat);\r\nsocket.on('resetWords', resetWords);\r\nsocket.on('newBoard', newBoard);\r\n\r\n/* Event Listeners\r\n***********************************/\r\nsubmitName_btn.addEventListener(\"click\", sendNameToServer);\r\njoinBlue_btn.addEventListener(\"click\", joinBlueTeam);\r\njoinRed_btn.addEventListener(\"click\", joinRedTeam);\r\nblueSpy_btn.addEventListener(\"click\", blueSpyMaster);\r\nredSpy_btn.addEventListener(\"click\", redSpyMaster);\r\nstartGame_btn.addEventListener(\"click\", gameStartSetup);\r\nrestartGame_btn.addEventListener(\"click\", restartGame);\r\ndocument.querySelector(\"#hint-btn\").addEventListener(\"click\", startGuess);\r\nchatInput.addEventListener(\"keyup\", chatEntered);\r\nteamChatInput.addEventListener(\"keyup\", teamChatEntered);\r\n\r\n// add a click listener to all cards\r\nfor(let i = 0; i < allCards.length; i++)\r\n\tallCards[i].addEventListener(\"click\", whichCardWasPicked);\r\n}\n\n//# sourceURL=webpack:///./client.js?");

/***/ }),

/***/ "./player-setup/name-handlers.js":
/*!***************************************!*\
  !*** ./player-setup/name-handlers.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function appendToDOM(playerName, elementLocation) {\r\n\tlet player = document.createElement(\"h3\");\r\n\tlet node = document.createTextNode(playerName + \"  \");\r\n\tplayer.appendChild(node);\r\n\telementLocation.appendChild(player);\r\n}\r\n\r\nfunction updateCurrentPlayers(playerNames, elementLocation) {\r\n\tplayerNames.map(playerName => {\r\n\t\tlet player = document.createElement(\"h3\");\r\n\t\tlet node = document.createTextNode(playerName + \"  \");\r\n\t\tplayer.appendChild(node);\r\n\t\telementLocation.appendChild(player);\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n\tappendToDOM: appendToDOM,\r\n\tupdateCurrentPlayers: updateCurrentPlayers\r\n}\n\n//# sourceURL=webpack:///./player-setup/name-handlers.js?");

/***/ })

/******/ });